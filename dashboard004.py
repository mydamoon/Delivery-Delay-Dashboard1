import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np

def show_dashboard():
    # üìä **Dashboard Title**
    # st.set_page_config(page_title="Impact of Shipping Delays on Profitability and Sales", layout="wide")
    st.title("üìä Impact of Shipping Delays on Profitability and Sales")

    # üìÇ **Upload CSV File**
    st.sidebar.title("üìÇ Upload Data")
    uploaded_file = st.sidebar.file_uploader("Upload a CSV file", type="csv")

    if uploaded_file is not None:
        df = pd.read_csv(uploaded_file, encoding='latin-1')

        # üìå **Convert Date to Datetime**
        df["Shipping date (DateOrders)"] = pd.to_datetime(df["shipping date (DateOrders)"], errors="coerce")

        # üìå **Filters**
        st.sidebar.markdown("### üéØ Filters")

        # üìÜ **Year, Quarter, Month Filters**
        df["Year"] = df["Shipping date (DateOrders)"].dt.year
        df["Quarter"] = df["Shipping date (DateOrders)"].dt.to_period("Q")
        df["Month"] = df["Shipping date (DateOrders)"].dt.to_period("M")

        # ‚úÖ **V√©rifier que "Order Region" et "Year" ne sont pas vides**
        if "Order Region" in df.columns and df["Order Region"].notna().sum() > 0:
            selected_region = st.sidebar.multiselect("üåç Select Region", list(df["Order Region"].dropna().unique()), default=df["Order Region"].dropna().unique())
        else:
            selected_region = []

        if "Year" in df.columns and df["Year"].notna().sum() > 0:
            selected_year = st.sidebar.multiselect("üìÜ Select Year", sorted(df["Year"].dropna().unique()), default=df["Year"].dropna().unique())
        else:
            selected_year = []

        # üìå **Filtrer les donn√©es en fonction des s√©lections**
        if selected_region:
            df = df[df["Order Region"].isin(selected_region)]
        if selected_year:
            df = df[df["Year"].isin(selected_year)]

        # üìå **V√©rification des colonnes n√©cessaires**
        required_columns = ["Days for shipping (real)", "Days for shipment (scheduled)", "Order Profit Per Order", "Sales", "Customer Segment"]
        if not all(col in df.columns for col in required_columns):
            st.error("Missing required columns in the dataset!")
            st.stop()

        # ‚úÖ **√âviter les divisions par z√©ro**
        df = df.replace([np.inf, -np.inf], np.nan)  # Remplace les infinis par NaN
        df = df.dropna(subset=["Days for shipping (real)", "Days for shipment (scheduled)", "Order Profit Per Order", "Sales"])

        # ‚úÖ **Calculer les ratios uniquement pour les valeurs valides**
        df = df[df["Days for shipment (scheduled)"] > 0]  # Exclure les valeurs nulles ou 0 pour √©viter division par z√©ro
        df["Delay Ratio"] = df["Days for shipping (real)"] - df["Days for shipment (scheduled)"]
        df["Profit Margin"] = df["Order Profit Per Order"] / df["Sales"]*100

        # ‚úÖ **Cr√©er un DataFrame agr√©g√© pour la Bubble Chart**
        df_bubble = df.groupby("Customer Segment").agg(
            avg_delay_ratio=("Delay Ratio", "mean"),
            avg_profit_margin=("Profit Margin", "mean"),
            total_sales=("Sales", "sum")
        ).reset_index()

        # ‚úÖ **V√©rifier s'il y a des valeurs NaN ou vides**
        df_bubble = df_bubble.dropna(subset=["avg_delay_ratio", "avg_profit_margin", "total_sales"])

        if df_bubble.empty:
            st.warning("No data available for the selected filters!")
        else:
            # ‚úÖ **Normalize bubble size** (√©viter qu'elles soient trop petites)
            df_bubble["bubble_size"] = ((df_bubble["total_sales"] / df_bubble["total_sales"].max()) * 100 + 10)*3  # +10 pour √©viter 0

            # üìä **Bubble Chart: Profit Margin vs. Delay Ratio**
            st.markdown("### üìà Profit Margin vs. Delay Ratio by Customer Segment")

            fig = px.scatter(df_bubble,
                             x="avg_delay_ratio",
                             y="avg_profit_margin",
                             size=df_bubble["bubble_size"],
                             color="Customer Segment",
                             hover_data=["Customer Segment", "avg_delay_ratio", "avg_profit_margin", "total_sales"],
                             labels={"avg_delay_ratio": "Delay Ratio", "avg_profit_margin": "Profit Margin"},
                             size_max=100
                             # title="Profit Margin vs. Delay Ratio by Customer Segment"
                             )

            # ‚úÖ **Format Y-Axis as Percentage**
            fig.update_layout(
                yaxis=dict(tickformat=".2f", title="Profit Margin (%)"),
                xaxis=dict(tickformat=".4f"),
                legend_title="Customer Segment"
            )
            fig.update_traces(marker=dict(opacity=0.5, line=dict(width=1, color="black")))  # Add transparency + outline

            st.plotly_chart(fig, use_container_width=True)

    else:
        st.warning("‚ö†Ô∏è Please upload a CSV file to view the visualizations.")
